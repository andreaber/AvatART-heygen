#!/usr/bin/env python3
"""
Script de inicializaci√≥n de base de datos para la aplicaci√≥n Gen-AvatART.

Este script automatiza el proceso de configuraci√≥n inicial de la aplicaci√≥n,
creando la estructura de base de datos y estableciendo un usuario administrador
para el primer acceso al sistema.

El m√≥dulo incluye:
    - Funci√≥n init_database()    : Inicializa la estructura de BD completa
    - Funci√≥n create_admin_user(): Crea el usuario administrador inicial
    - Funci√≥n main()            : Punto de entrada con validaciones

Funcionalidades principales:
    - Creaci√≥n autom√°tica de todas las tablas de la BD
    - Validaci√≥n de configuraci√≥n de entorno (.env)
    - Creaci√≥n interactiva de usuario administrador
    - Validaciones de datos √∫nicos (email, username)
    - Manejo de errores y feedback al usuario
    - Verificaci√≥n de administradores existentes

Uso:
    python init_db.py

Note:
    - Requiere archivo .env configurado
    - Solo crea un administrador si no existe ninguno
    - Valida contrase√±as y unicidad de datos
"""

import os
import sys
from getpass import getpass

# Agregar el directorio del proyecto al path para importaciones
sys.path.insert(0, os.path.dirname(os.path.abspath(__file__)))

def create_admin_user():
    """
    Crea un usuario administrador inicial para la aplicaci√≥n.
    
    Esta funci√≥n permite establecer el primer usuario con permisos
    administrativos completos, necesario para acceder al sistema
    por primera vez y gestionar otros usuarios.
    
    Returns:
        None
    
    Raises:
        Exception: Si hay errores de base de datos o validaci√≥n
    
    Note:
        - Solo se ejecuta si no existe ning√∫n administrador
        - Solicita datos interactivamente al usuario
        - Valida unicidad de email y username
        - Requiere contrase√±a m√≠nima de 6 caracteres
        - Confirma contrase√±a para evitar errores de tipeo
    """
    from app import create_app, db
    from app.models.user import User, UserRole, UserStatus
    
    app = create_app()
    
    with app.app_context():
        print("=== Creaci√≥n de Usuario Administrador ===")
        
        # Verificar si ya existe un admin
        existing_admin = User.query.filter_by(role=UserRole.ADMIN).first()
        if existing_admin:
            print(f"Ya existe un administrador: {existing_admin.email}")
            return
        
        # Recopilar datos del administrador
        print("\nIngresa los datos del administrador:")
        email       = input("Email: ").strip()
        username    = input("Username: ").strip()
        first_name  = input("Nombre: ").strip()
        last_name   = input("Apellido: ").strip()
        
        # ‚úÖ Validaci√≥n de email √∫nico en la base de datos
        if User.query.filter_by(email=email).first():
            print("Error: Ya existe un usuario con este email")
            return
        
        # ‚úÖ Validaci√≥n de username √∫nico en la base de datos
        if User.query.filter_by(username=username).first():
            print("Error: Ya existe un usuario con este username")
            return
        
        # ‚úÖ Captura y validaci√≥n de contrase√±a con confirmaci√≥n
        while True:
            # Getpass oculta la entrada
            password           = getpass("Contrase√±a: ") 
            confirm_password   = getpass("Confirmar contrase√±a: ")

            # Validar longitud m√≠nima de contrase√±a
            if len(password) < 6:
                print("Error: La contrase√±a debe tener al menos 6 caracteres")
                continue
            
            # Validar que las contrase√±as coincidan
            if password != confirm_password:
                print("Error: Las contrase√±as no coinciden")
                continue
            
            break
        
        # Crear usuario administrador
        admin_user = User(
            email       = email,
            username    = username,
            first_name  = first_name,
            last_name   = last_name,
            role        = UserRole.ADMIN,
            status      = UserStatus.ACTIVE
        )

        # Establecer la contrase√±a (hashing interno)
        admin_user.set_password(password)

        # ‚úÖ Guardar en base de datos con commit autom√°tico
        db.session.add(admin_user)
        db.session.commit()
        
        print(f"\n‚úÖ Usuario administrador creado exitosamente:")
        print(f"   Email: {email}")
        print(f"   Username: {username}")
        print(f"   Nombre: {first_name} {last_name}")

def init_database():
    """
    Inicializa completamente la base de datos de la aplicaci√≥n.
    
    Esta funci√≥n se encarga de crear toda la estructura de tablas
    necesaria para el funcionamiento de la aplicaci√≥n y establecer
    el usuario administrador inicial.
    
    Returns:
        None
    
    Raises:
        Exception: Si hay errores en la creaci√≥n de tablas o usuarios
    
    Note:
        - Crea todas las tablas definidas en los modelos SQLAlchemy
        - Llama autom√°ticamente a create_admin_user()
        - Utiliza el contexto de aplicaci√≥n Flask para BD
        - No sobrescribe datos existentes
    """
    from app import create_app, db
    
    app = create_app()
    
    with app.app_context():
        print("=== Inicializaci√≥n de Base de Datos ===")
        
        # Crear todas las tablas
        print("Creando tablas de base de datos...")
        db.create_all()
        print("‚úÖ Tablas creadas exitosamente")
        
        # Crear usuario admin si no existe
        create_admin_user()

def main():
    """
    Funci√≥n principal del script de inicializaci√≥n.
    
    Esta funci√≥n coordina todo el proceso de inicializaci√≥n,
    realizando validaciones previas y manejando errores de
    manera elegante con feedback claro al usuario.
    
    Returns:
        None
    
    Note:
        - Valida la existencia del archivo .env antes de continuar
        - Proporciona instrucciones claras en caso de errores
        - Maneja excepciones con traceback para debugging
        - Confirma √©xito con instrucciones para siguiente paso
    """
    print("üöÄ Gem-AvatART - Script de Inicializaci√≥n\n")
    
    # Verificar que existe el archivo .env
    if not os.path.exists('.env'):
        print("‚ö†Ô∏è  No se encontr√≥ el archivo .env")
        print("   Copia .env.example a .env y configura las variables")
        print("   cp .env.example .env")
        return
    
    try:
        init_database()
        print("\nüéâ Inicializaci√≥n completada exitosamente!")
        print("\nPuedes iniciar la aplicaci√≥n con:")
        print("   python app.py")
        
    except Exception as e:
        # ‚úÖ Manejo elegante de errores con informaci√≥n √∫til
        print(f"\n‚ùå Error durante la inicializaci√≥n: {e}")
        import traceback
        traceback.print_exc() # Informaci√≥n detallada para debugging

# ‚úÖ Punto de entrada del script cuando se ejecuta directamente
if __name__ == "__main__":
    main()
